
datapath calls:
- mult twice
- sub once
- abs once

add calls:
- nothing

sub calls:
- add once

abs calls:
- add once

mult calls:
- add numBits times

to test datapath:
- create some test cases
- calculate the actual outcome
- use blif simulator to simulate datapath blif for each input combo
- compare outcomes

to test mult:
- create random test cases for 1-32 bit numbers
- calculate actual outcome
- use blif simulator to simulate multiplication of binary numbers
- compare outcomes


to create accurate test cases for mult:
- create blifs?
- create c program that transforms decimal to binary string
- create mult blifs that have the truth tables

adder
inputs a b cin
output s cout

subtractor
inputs a b
output s

multiplier
inputs a b
output s

datapath
inputs x y
outputs z



test cases for datapath:
range: -32768 to 32767

2:
giving me 12*y instead of 9*x
x=32767 y=32767
outcome=294903
000
1000111111111110111

4:
giving me 12*y instead of 9*x
x=-32768 y=32767
110
outcome=294912
1001000000000

9:
giving me 12*y
instead of 9*x
x=9 y=12
outcome=81
000
1010001


11:
giving me 12*y
instead of 9*x
x=-9 y=12
outcome=81
110
1010001






test cases for mult:

2bit:
a=11 b=11
out=9
out=1001

3bit:
a=111 b=111
out=49
out=110001

4bit:
a=1111 b=1111
out=225
out=11100001

5bit:
a=11111 b=11111
out=961
out=1111000001

12bit:
a=11111111111 b=111111111111
out=16769025
out=1111111111110000000000001

16bit:
a=1111111111111111 b=1111111111111111
out=4294836225
out=11111111111111100000000000000001





